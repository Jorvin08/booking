/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package transactions;

import Config.Session;
import Users.User;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

/**
 *
 * @author II
 */
public class bookroom extends javax.swing.JFrame {

    /**
     * Creates new form bookhotel
     */
    public bookroom() {
        setUndecorated(true);
        initComponents();
       loadAllRoomsToTable();
       
    }
private void loadAllRoomsToTable() {
    String[] columnNames = {
        "Room ID", "Hotel Name", "Room Number", "Room Type", "Price", "Room Status"
    };

    DefaultTableModel model = new DefaultTableModel();
    model.setColumnIdentifiers(columnNames);

    String url = "jdbc:mysql://localhost:3306/booking";
    String username = "root";
    String password = "";

    String sql = "SELECT r.room_id, h.hotel_name, r.room_number, r.room_type, r.price, r.status " +
                 "FROM rooms r " +
                 "JOIN hotels h ON r.hotel_id = h.hotel_id " +
                 "ORDER BY r.room_id DESC";

    try (Connection conn = DriverManager.getConnection(url, username, password);
         PreparedStatement pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery()) {

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("room_id"),
                rs.getString("hotel_name"),
                rs.getString("room_number"),
                rs.getString("room_type"),
                rs.getDouble("price"),
                rs.getString("status")
            });
        }

        jTable1.setModel(model);

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading room data: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Bookroom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(204, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(102, 255, 255));
        jPanel2.setForeground(new java.awt.Color(204, 0, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Book a ROOM");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, -1, -1));

        jButton2.setBackground(new java.awt.Color(102, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 890, 60));

        jTable1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 830, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 840, 380));

        Bookroom.setBackground(new java.awt.Color(102, 255, 255));
        Bookroom.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Bookroom.setText("Book");
        Bookroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookroomActionPerformed(evt);
            }
        });
        jPanel1.add(Bookroom, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 450, 120, 41));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BookroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookroomActionPerformed
   int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a room to book.", "No Selection", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int roomId = (int) jTable1.getValueAt(selectedRow, 0);

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    LocalDate today = LocalDate.now();
    LocalDate checkInDate = null, checkOutDate = null;
    int numGuests = 0;

    // Ask and validate check-in date
    while (true) {
        String checkIn = JOptionPane.showInputDialog(this, "Enter Check-In Date (YYYY-MM-DD):");
        if (checkIn == null) return;

        try {
            checkInDate = LocalDate.parse(checkIn, formatter);
            if (checkInDate.isBefore(today)) {
                JOptionPane.showMessageDialog(this, "Check-in date cannot be in the past.", "Date Error", JOptionPane.ERROR_MESSAGE);
            } else {
                break;
            }
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid check-in date format. Use YYYY-MM-DD.", "Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Ask and validate check-out date
    while (true) {
        String checkOut = JOptionPane.showInputDialog(this, "Enter Check-Out Date (YYYY-MM-DD):");
        if (checkOut == null) return;

        try {
            checkOutDate = LocalDate.parse(checkOut, formatter);
            if (!checkOutDate.isAfter(checkInDate)) {
                JOptionPane.showMessageDialog(this, "Check-out date must be after check-in date.", "Date Error", JOptionPane.ERROR_MESSAGE);
            } else {
                break;
            }
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this, "Invalid check-out date format. Use YYYY-MM-DD.", "Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Ask and validate number of guests
    while (true) {
        String guestStr = JOptionPane.showInputDialog(this, "Enter Number of Guests:");
        if (guestStr == null) return;

        try {
            numGuests = Integer.parseInt(guestStr);
            if (numGuests <= 0) {
                JOptionPane.showMessageDialog(this, "Number of guests must be greater than 0.", "Input Error", JOptionPane.ERROR_MESSAGE);
            } else {
                break;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid number of guests.", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    String specialRequests = "None";

    String url = "jdbc:mysql://localhost:3306/booking";
    String username = "root";
    String password = "";

    try (Connection conn = DriverManager.getConnection(url, username, password)) {

        // Check if room already booked or reserved
        String checkSql = "SELECT COUNT(*) FROM booked_rooms WHERE room_id = ? AND booking_status IN ('pending', 'approved') "
                        + "UNION ALL "
                        + "SELECT COUNT(*) FROM reserved_rooms WHERE room_id = ? AND reservation_status IN ('pending', 'approved')";

        try (PreparedStatement checkPst = conn.prepareStatement(checkSql)) {
            checkPst.setInt(1, roomId);
            checkPst.setInt(2, roomId);

            ResultSet rs = checkPst.executeQuery();
            int totalConflicts = 0;
            while (rs.next()) {
                totalConflicts += rs.getInt(1);
            }

            if (totalConflicts > 0) {
                JOptionPane.showMessageDialog(this, "This room is already booked or reserved.", "Booking Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        // Insert new room booking
        String insertSql = "INSERT INTO booked_rooms (room_id, user_id, check_in_date, check_out_date, num_guests, special_requests, booking_status) "
                         + "VALUES (?, ?, ?, ?, ?, ?, 'pending')";

        try (PreparedStatement pst = conn.prepareStatement(insertSql)) {
            pst.setInt(1, roomId);
            pst.setInt(2, Session.getInstance().getId());
            pst.setString(3, checkInDate.toString());
            pst.setString(4, checkOutDate.toString());
            pst.setInt(5, numGuests);
            pst.setString(6, specialRequests);

            int result = pst.executeUpdate();
            if (result > 0) {
                // Set room status to 'not available'
                String updateStatusSql = "UPDATE rooms SET status = 'not available' WHERE room_id = ?";
                try (PreparedStatement updatePst = conn.prepareStatement(updateStatusSql)) {
                    updatePst.setInt(1, roomId);
                    updatePst.executeUpdate();
                }

                JOptionPane.showMessageDialog(this, "Room booking submitted successfully.Please pay at the front desk and Wait for admin approval.");
            } else {
                JOptionPane.showMessageDialog(this, "Booking failed.", "Insert Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BookroomActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        User aa = new User();
        aa.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(bookroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(bookroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(bookroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(bookroom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new bookroom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bookroom;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
